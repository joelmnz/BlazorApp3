@using BlazorApp3.Authenticaion
@inherits LayoutComponentBase

@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText>App3</MudText>
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <a @onclick="Logout" href="javascript:void(0)">Logout</a>
                <MudIconButton Icon="@Icons.Material.Filled.VerifiedUser"></MudIconButton>
            </Authorized>
            <NotAuthorized>
                <MudIconButton Title="Login" Icon="@Icons.Material.Filled.Person" OnClick="@(() => navManager.NavigateTo("/Login"))" />
            </NotAuthorized>
        </AuthorizeView>
        
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
        @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private async Task Logout()
    {
        var customAuthProv = (CustomAuthenticationStateProvider) authStateProvider;
        await customAuthProv.UpdateAuthenticationState(null);
        navManager.NavigateTo("/", true);
    }

}